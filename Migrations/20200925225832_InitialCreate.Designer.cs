// <auto-generated />
using AnnoBibLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnnoBibLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200925225832_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AnnoBibLibrary.Models.Annotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuoteData")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Annotations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Notes = "Fellowship",
                            QuoteData = "[]",
                            SourceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Notes = "Towers",
                            QuoteData = "[]",
                            SourceId = 2
                        },
                        new
                        {
                            Id = 3,
                            Notes = "King",
                            QuoteData = "[]",
                            SourceId = 3
                        },
                        new
                        {
                            Id = 4,
                            Notes = "Lion",
                            QuoteData = "[]",
                            SourceId = 4
                        },
                        new
                        {
                            Id = 5,
                            Notes = "Prince",
                            QuoteData = "[]",
                            SourceId = 5
                        },
                        new
                        {
                            Id = 6,
                            Notes = "Magician",
                            QuoteData = "[]",
                            SourceId = 6
                        });
                });

            modelBuilder.Entity("AnnoBibLibrary.Models.AnnotationLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnnotationId")
                        .HasColumnType("int");

                    b.Property<string>("KeywordValues")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AnnotationLinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnnotationId = 1,
                            KeywordValues = "",
                            LibraryId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnnotationId = 2,
                            KeywordValues = "",
                            LibraryId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnnotationId = 3,
                            KeywordValues = "",
                            LibraryId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnnotationId = 4,
                            KeywordValues = "",
                            LibraryId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnnotationId = 5,
                            KeywordValues = "",
                            LibraryId = 2
                        },
                        new
                        {
                            Id = 6,
                            AnnotationId = 6,
                            KeywordValues = "",
                            LibraryId = 2
                        });
                });

            modelBuilder.Entity("AnnoBibLibrary.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(511) CHARACTER SET utf8mb4")
                        .HasMaxLength(511);

                    b.Property<string>("KeywordGroups")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The collected works of J.R.R. Tolkien, a 20th century fantasy writer.",
                            KeywordGroups = "['Places', 'People', 'Concepts']",
                            Title = "J.R.R. Tolkien Library"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The collected works of C.S. Lewis, a 20th century fantasy/science-fiction/non-fiction writer.",
                            KeywordGroups = "['Places', 'People', 'Concepts']",
                            Title = "C.S. Lewis Library"
                        });
                });

            modelBuilder.Entity("AnnoBibLibrary.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fields = "{\"list\": [{ \"name\": \"title\", \"type\": \"proper\", \"values\": [\"The Lord of the Rings: the Fellowship of the Ring\"] }, { \"name\": \"author\", \"type\": \"name\", \"values\": [\"J.R.R. Tolkien\"] }]}",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 2,
                            Fields = "{\"list\": [{ \"name\": \"title\", \"type\": \"proper\", \"values\": [\"The Lord of the Rings: the Two Towers\"] }, { \"name\": \"author\", \"type\": \"name\", \"values\": [\"J.R.R. Tolkien\"] }]}",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 3,
                            Fields = "{\"list\": [{ \"name\": \"title\", \"type\": \"proper\", \"values\": [\"The Lord of the Rings: the Return of the King\"] }, { \"name\": \"author\", \"type\": \"name\", \"values\": [\"J.R.R. Tolkien\"] }]}",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 4,
                            Fields = "{\"list\": [{ \"name\": \"title\", \"type\": \"proper\", \"values\": [\"The Chronicles of Narnia: the Lion, the Witch, and the Wardrobe\"] }, { \"name\": \"author\", \"type\": \"name\", \"values\": [\"C.S. Lewis\"] }]}",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 5,
                            Fields = "{\"list\": [{ \"name\": \"title\", \"type\": \"proper\", \"values\": [\"The Chronicles of Narnia: Prince Caspian\"] }, { \"name\": \"author\", \"type\": \"name\", \"values\": [\"C.S. Lewis\"] }]}",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 6,
                            Fields = "{\"list\": [{ \"name\": \"title\", \"type\": \"proper\", \"values\": [\"The Chronicles of Narnia: the Magician's Nephew\"] }, { \"name\": \"author\", \"type\": \"name\", \"values\": [\"C.S. Lewis\"] }]}",
                            Type = "Simple"
                        });
                });

            modelBuilder.Entity("AnnoBibLibrary.Models.Annotation", b =>
                {
                    b.HasOne("AnnoBibLibrary.Models.Source", "Source")
                        .WithMany("Annotations")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
